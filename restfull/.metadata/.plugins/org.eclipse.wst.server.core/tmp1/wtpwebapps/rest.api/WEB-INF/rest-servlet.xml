<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- Scans the classpath of this application for Spring annotations such 
		as @Component, @Service, @Controller and @Repositry to deploy as beans. For 
		example, the PeopleService is annotated with @Service("peopleService") which 
		means that spring will automatically create a bean with the name peopleService. -->
	<context:component-scan base-package="com.spidertracks.demo.rest.api" />

	<!-- Create the XStream marshaller bean -->
	<bean id="xstreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
		<property name="autodetectAnnotations" value="true" />
		<!-- Set some properties to make the outputted xml look nicer -->
		<property name="aliases">
			<map>
				<entry key="people"
					value="com.spidertracks.demo.rest.api.model.PeopleWrapper" />
				<entry key="apimessage" value="com.spidertracks.demo.rest.api.model.ApiMessage" />
				<entry key="person" value="com.spidertracks.demo.rest.api.model.Person" />
			</map>
		</property>
		<property name="implicitCollections">
			<map>
				<entry key="com.spidertracks.demo.rest.api.model.PeopleWrapper"
					value="people" />
			</map>
		</property>
	</bean>

	<!-- Activates support for XML and JSON mapping if they are on the class 
		path. -->
	<mvc:annotation-driven>
		<!-- we are adding an XStream converter to the default list. It seems that 
			if we do not include this section, then marshalling will work, but unmarshalling 
			will not, instead we get a "Unsupported Media Type". -->
		<mvc:message-converters>
			<!-- Configure the XStream message converter -->
			<bean
				class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
				<property name="marshaller" ref="xstreamMarshaller" />
				<property name="unmarshaller" ref="xstreamMarshaller" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- Configures the different content types the servlet can handle. -->
	<bean name="viewResolver"
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">

		<property name="ignoreAcceptHeader" value="true" />
		<property name="favorParameter" value="true" />
		<property name="favorPathExtension" value="true" />
		<!-- if no content type is specified, return json. -->
		<property name="defaultContentType" value="application/json" />

		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
					<!-- see http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/servlet/view/json/MappingJacksonJsonView.html#setExtractValueFromSingleKeyModel(boolean) -->
					<property name="extractValueFromSingleKeyModel" value="true" />
				</bean>
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg ref="xstreamMarshaller" />
					<!-- see http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/servlet/view/xml/MarshallingView.html#setModelKey(java.lang.String) -->
					<property name="modelKey" value="responseObject" />
				</bean>
			</list>
		</property>
	</bean>

</beans>