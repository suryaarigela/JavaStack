<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<beans:description>
		This file defines all of the necessary security
		configuration.

		It is split from the applicationContext.xml file to make
		it clearer
		which beans and configuration elements are related to
		security. It also makes it more reusable for other projects, as this
		file can be copied to replicate the security configuration.
	</beans:description>

	<!-- Create the auth restrictions. create-session="stateless" means that 
		a session will never be created, the user will have to send auth credentials 
		each time. -->
	<http create-session="stateless">
		<!-- Any resources under the people url require the user role, all other 
			resources are accessible to everyone. -->
		<intercept-url pattern="/people*" access="ROLE_USER" />

		<!-- Configures basic auth. -->
		<http-basic />
	</http>

	<!-- Manages users. -->
	<authentication-manager>
		<authentication-provider>
			<!-- Lists the user names, password, and authorities of our users. In 
				a real app, this would be linked to a database of some sort. Spring has built 
				in support for using JDBC compatible databases as a user details store. -->
			<user-service>
				<user name="surya" password="surya243" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>

</beans:beans>