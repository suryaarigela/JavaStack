JVM

OverView
--------
1)JVM (Java Virtual Machine) is an abstract machine.

2)It is a specification that provides runtime environment in which java bytecode can be executed.

3)JVMs are available for many hardware and software platforms (i.e. JVM is platform dependent).

What is JVM?
===========
1)A specification where working of Java Virtual Machine is specified. But implementation provider is independent to choose the algorithm. Its implementation has been provided by Sun and other companies.

2)An implementation Its implementation is known as JRE (Java Runtime Environment).

3)Runtime Instance Whenever you write java command on the command prompt to run the java class, an instance of JVM is created.

4)An instance of a JVM is an implementation running in a process that executes a computer program compiled into Java bytecode. Java Runtime Environment (JRE) is a software package that contains what is required to run a Java program.



What it Does:
============
The JVM performs following operation:
------------------------------------
1)Loads code
2)Verifies code
3)Executes code
4)Provides runtime environment

JVM provides definitions for the:
--------------------------------
1)Memory area
2)Class file format
3)Register set
4)Garbage-collected heap
5)Fatal error reporting etc.




1) Classloader

Classloader is a subsystem of JVM that is used to load class files.

2) Class(Method) Area

Class(Method) Area stores per-class structures such as the runtime constant pool, field and method data, the code for methods.

3) Heap

It is the runtime data area in which objects are allocated.

4) Stack

Java Stack stores frames.It holds local variables and partial results, and plays a part in method invocation and return.
Each thread has a private JVM stack, created at the same time as thread.
A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.
5) Program Counter Register

PC (program counter) register. It contains the address of the Java virtual machine instruction currently being executed.

6) Native Method Stack

It contains all the native methods used in the application.

7) Execution Engine

It contains:
1) A virtual processor
2) Interpreter: Read bytecode stream then execute the instructions.
3) Just-In-Time(JIT) compiler: It is used to improve the performance.JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation.Here the term ?compiler? refers to a translator from the instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.




JVM Vs JDK VS JRE
-----------------

JVM

JVM (Java Virtual Machine) is an abstract machine. It is a specification that provides runtime environment in which java bytecode can be executed.

JVMs are available for many hardware and software platforms. JVM, JRE and JDK are platform dependent because configuration of each OS differs. But, Java is platform independent.

The JVM performs following main tasks:

Loads code
Verifies code
Executes code
Provides runtime environment


JRE

JRE is an acronym for Java Runtime Environment.It is used to provide runtime environment.It is the implementation of JVM. It physically exists. It contains set of libraries + other files that JVM uses at runtime.

Implementation of JVMs are also actively released by other companies besides Sun Micro Systems.


JDK

JDK is an acronym for Java Development Kit.It physically exists.It contains JRE + development tools(Javac , java...)